using Microsoft.Xrm.Sdk.Workflow;
using Microsoft.Xrm.Sdk;
using System;
using System.Activities;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Xrm.Sdk.Query;
using System.ServiceModel;
// ----------------------------------------- NOT FINISHED --------------------------------------------
namespace WorkOrderManagment
{
    internal class UpdateWorkOrderStatus : CodeActivity
    {
        // Fields
        [Output("status")]
        [AttributeTarget("new_work_order", "new_os_status")]
        public InArgument<OptionSetValue> Status { get; set; }


        protected override void Execute(CodeActivityContext executionContext)
        {
            ITracingService tracingService = executionContext.GetExtension<ITracingService>();
            IWorkflowContext context = executionContext.GetExtension<IWorkflowContext>();
            IOrganizationServiceFactory serviceFactory = executionContext.GetExtension<IOrganizationServiceFactory>();
            IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

            try
            {
                // delete work order's related Invoice + 
                // generate new Invoice & Invoice Line according work Order, work order Product & work order service
                // Invoice number should be the same work order number, but prefix should be "INV-"
                // Invoice Product name should autogenerated from 'product' look up value name
                OptionSetValue status = Status.Get(executionContext);
                if (status != null)
                {
                    tracingService.Trace($"status: {status}");
                    if (status.Value.ToString() == "")
                    {

                    }
                }

            }
            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException(ex.Message);
            }
        }

        public Entity getInvoiceByWorkOrder(Guid workOrderId, IOrganizationService service)
        {
            QueryExpression queryInvoices = new QueryExpression
            {

                EntityName = "new_invoice",
                ColumnSet = new ColumnSet(true),
                Criteria =
                {
                    FilterOperator = LogicalOperator.And,
                    Conditions =
                    {
                        new ConditionExpression("new_fk_work_order", ConditionOperator.Equal, workOrderId)
                    }
                }

            };
            EntityCollection data = service.RetrieveMultiple(queryInvoices);
            if (data != null && data.Entities.Count > 0)
            {
                return data.Entities[0];
            }
            return null;
        }
        public void delInvoice(Entity invoice, IOrganizationService service)
        {
            if (invoice != null)
            {
                service.Delete("invoice", invoice.Id);
            }
        }

        public Entity getWorkOrder(Guid workOrderId, IOrganizationService service)
        {
            Entity invoice = service.Retrieve("new_work_order", workOrderId, new ColumnSet(true));
            if (invoice != null)
            {
                return invoice;
            }
            return null;

        }
        public EntityCollection getWorkOrderProducts(Guid workOrderId, IOrganizationService service)
        {
            QueryExpression queryWorkOrderProducts = new QueryExpression
            {

                EntityName = "new_work_order_product",
                ColumnSet = new ColumnSet(true),
                Criteria =
                {
                    FilterOperator = LogicalOperator.And,
                    Conditions =
                    {
                        new ConditionExpression("new_fk_work_order", ConditionOperator.Equal, workOrderId)
                    }
                }

            };
            return service.RetrieveMultiple(queryWorkOrderProducts);
        }
        public EntityCollection getWorkOrderServices(Guid workOrderId, IOrganizationService service) {
            QueryExpression queryWorkOrderServices = new QueryExpression
            {

                EntityName = "new_work_order_service",
                ColumnSet = new ColumnSet(true),
                Criteria =
                {
                    FilterOperator = LogicalOperator.And,
                    Conditions =
                    {
                        new ConditionExpression("new_fk_work_order", ConditionOperator.Equal, workOrderId)
                    }
                }

            };
            return service.RetrieveMultiple(queryWorkOrderServices);
        }

        public void setInvoiceNumber(Entity workOrder, IOrganizationService service) { }
        public void setInvoiceProducts(EntityCollection products, IOrganizationService service) { }
        public void setInvoiceServices(EntityCollection services, IOrganizationService service) { }
    }
}


// In invoice Product autofillname
// calculate total amount